// 28 Define a vector to hold Quote objects but put Bulk_quote objects into that
//    vector. Compute the total net_price of all the elements in the vector.
// 29 Repeat your program, but this time store shared_ptrs to objects of type
//    Quote. Explain any discrepancy in the sum generated by the this version
//    and the previous program. If there is no discrepancy, explain why there
//    isn't one.

#include <iostream>
#include <memory>
#include <string>
#include <vector>

class Quote
{
public:
  Quote() = default;
  Quote(const std::string &bn, const double p) : bookNo(bn), price(p) {}

  std::string isbn() const { return bookNo; }
  virtual double net_price(size_t n) const { return n * price; }

  virtual ~Quote() = default;

private:
  std::string bookNo;

protected:
  double price = 0.0;
};

class Bulk_quote : public Quote
{
public:
  Bulk_quote() = default;
  Bulk_quote(const std::string &bn, const double p, const size_t mq,
             const double d)
      : Quote(bn, p), min_qty(mq), discount(d) {};

  double net_price(size_t n) const override
  {
    if (n >= min_qty)
    {
      return n * price * (1 - discount);
    }
    else
    {
      return n * price;
    };
  }

private:
  size_t min_qty = 0;
  double discount = 0.0;
};

double print_total(std::ostream &os, const Quote &item, size_t n)
{
  double res = item.net_price(n);
  os << "ISBN: " << item.isbn() << ", # sold: " << n << ", total due: " << res
     << "\n";
  return res;
};

int main()
{

  Quote cpp_primer("34-2346", 49.99);
  Bulk_quote cpp_primer_bulk("34-2346", 49.99, 5, 0.10);

  std::vector<Quote> basket;
  basket.push_back(cpp_primer);
  basket.push_back(cpp_primer_bulk);
  for (const auto q : basket)
  {
    print_total(std::cout, q, 5);
  }

  std::cout << "\n";

  std::vector<std::shared_ptr<Quote>> smart_basket;
  smart_basket.push_back(std::make_shared<Quote>(cpp_primer));
  smart_basket.push_back(std::make_shared<Bulk_quote>(cpp_primer_bulk));
  for (const auto q : smart_basket)
  {
    print_total(std::cout, *q, 5);
  }
}